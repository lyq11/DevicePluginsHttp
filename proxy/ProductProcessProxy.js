// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "ProductProcess.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var CivetDevicePluginCenter = CivetDevicePluginCenter || {};
module.exports.CivetDevicePluginCenter = CivetDevicePluginCenter;

CivetDevicePluginCenter.ProductProcessProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

CivetDevicePluginCenter.ProductProcessProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

CivetDevicePluginCenter.ProductProcessProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

CivetDevicePluginCenter.ProductProcessProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

CivetDevicePluginCenter.ProductProcessProxy.prototype.getVersion = function () {
    return this._worker.version;
};

CivetDevicePluginCenter.Product = function() {
    this.ID = 0;
    this.ProductID = "";
    this.ProductName = "";
    this.Platform = "";
    this.CreateTime = "";
    this.UpdateTime = "";
    this._classname = "CivetDevicePluginCenter.Product";
};
CivetDevicePluginCenter.Product._classname = "CivetDevicePluginCenter.Product";
CivetDevicePluginCenter.Product._write = function (os, tag, value) { os.writeStruct(tag, value); };
CivetDevicePluginCenter.Product._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
CivetDevicePluginCenter.Product._readFrom = function (is) {
    var tmp = new CivetDevicePluginCenter.Product;
    tmp.ID = is.readInt32(0, false, 0);
    tmp.ProductID = is.readString(1, false, "");
    tmp.ProductName = is.readString(2, false, "");
    tmp.Platform = is.readString(3, false, "");
    tmp.CreateTime = is.readString(4, false, "");
    tmp.UpdateTime = is.readString(5, false, "");
    return tmp;
};
CivetDevicePluginCenter.Product.prototype._writeTo = function (os) {
    os.writeInt32(0, this.ID);
    os.writeString(1, this.ProductID);
    os.writeString(2, this.ProductName);
    os.writeString(3, this.Platform);
    os.writeString(4, this.CreateTime);
    os.writeString(5, this.UpdateTime);
};
CivetDevicePluginCenter.Product.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
CivetDevicePluginCenter.Product.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
CivetDevicePluginCenter.Product.prototype.toObject = function() { 
    return {
        "ID" : this.ID,
        "ProductID" : this.ProductID,
        "ProductName" : this.ProductName,
        "Platform" : this.Platform,
        "CreateTime" : this.CreateTime,
        "UpdateTime" : this.UpdateTime
    };
};
CivetDevicePluginCenter.Product.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "ID") && (this.ID = json.ID);
    _hasOwnProperty.call(json, "ProductID") && (this.ProductID = json.ProductID);
    _hasOwnProperty.call(json, "ProductName") && (this.ProductName = json.ProductName);
    _hasOwnProperty.call(json, "Platform") && (this.Platform = json.Platform);
    _hasOwnProperty.call(json, "CreateTime") && (this.CreateTime = json.CreateTime);
    _hasOwnProperty.call(json, "UpdateTime") && (this.UpdateTime = json.UpdateTime);
    return this;
};
CivetDevicePluginCenter.Product.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
CivetDevicePluginCenter.Product.new = function () {
    return new CivetDevicePluginCenter.Product();
};
CivetDevicePluginCenter.Product.create = function (is) {
    return CivetDevicePluginCenter.Product._readFrom(is);
};

var __CivetDevicePluginCenter_ProductProcess$CreateProduct$IF = {
    "name" : "CreateProduct",
    "return" : "int32",
    "arguments" : [{
        "name" : "product",
        "class" : "CivetDevicePluginCenter.Product",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ProductProcess$CreateProduct$IE = function (product) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, product);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ProductProcess$CreateProduct$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ProductProcess$CreateProduct$PE = function (product, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("product", product);
    return tup;
};

var __CivetDevicePluginCenter_ProductProcess$CreateProduct$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ProductProcess$CreateProduct$ER = function (data) {
    throw _makeError(data, "Call ProductProcess::CreateProduct failed");
};

CivetDevicePluginCenter.ProductProcessProxy.prototype.CreateProduct = function (product) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("CreateProduct", __CivetDevicePluginCenter_ProductProcess$CreateProduct$PE(product, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ProductProcess$CreateProduct$IF).then(__CivetDevicePluginCenter_ProductProcess$CreateProduct$PD, __CivetDevicePluginCenter_ProductProcess$CreateProduct$ER);
    } else {
        return this._worker.tars_invoke("CreateProduct", __CivetDevicePluginCenter_ProductProcess$CreateProduct$IE(product), arguments[arguments.length - 1], __CivetDevicePluginCenter_ProductProcess$CreateProduct$IF).then(__CivetDevicePluginCenter_ProductProcess$CreateProduct$ID, __CivetDevicePluginCenter_ProductProcess$CreateProduct$ER);
    }
};
CivetDevicePluginCenter.ProductProcessProxy.CreateProduct = __CivetDevicePluginCenter_ProductProcess$CreateProduct$IF;

var __CivetDevicePluginCenter_ProductProcess$DeleteProduct$IF = {
    "name" : "DeleteProduct",
    "return" : "int32",
    "arguments" : [{
        "name" : "productID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ProductProcess$DeleteProduct$IE = function (productID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, productID);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ProductProcess$DeleteProduct$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ProductProcess$DeleteProduct$PE = function (productID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("productID", productID);
    return tup;
};

var __CivetDevicePluginCenter_ProductProcess$DeleteProduct$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ProductProcess$DeleteProduct$ER = function (data) {
    throw _makeError(data, "Call ProductProcess::DeleteProduct failed");
};

CivetDevicePluginCenter.ProductProcessProxy.prototype.DeleteProduct = function (productID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("DeleteProduct", __CivetDevicePluginCenter_ProductProcess$DeleteProduct$PE(productID, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ProductProcess$DeleteProduct$IF).then(__CivetDevicePluginCenter_ProductProcess$DeleteProduct$PD, __CivetDevicePluginCenter_ProductProcess$DeleteProduct$ER);
    } else {
        return this._worker.tars_invoke("DeleteProduct", __CivetDevicePluginCenter_ProductProcess$DeleteProduct$IE(productID), arguments[arguments.length - 1], __CivetDevicePluginCenter_ProductProcess$DeleteProduct$IF).then(__CivetDevicePluginCenter_ProductProcess$DeleteProduct$ID, __CivetDevicePluginCenter_ProductProcess$DeleteProduct$ER);
    }
};
CivetDevicePluginCenter.ProductProcessProxy.DeleteProduct = __CivetDevicePluginCenter_ProductProcess$DeleteProduct$IF;

var __CivetDevicePluginCenter_ProductProcess$EditProduct$IF = {
    "name" : "EditProduct",
    "return" : "int32",
    "arguments" : [{
        "name" : "ID",
        "class" : "CivetDevicePluginCenter.Product",
        "direction" : "in"
    }, {
        "name" : "Key",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "Value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ProductProcess$EditProduct$IE = function (ID, Key, Value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, ID);
    os.writeString(2, Key);
    os.writeString(3, Value);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ProductProcess$EditProduct$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(4, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ProductProcess$EditProduct$PE = function (ID, Key, Value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("ID", ID);
    tup.writeString("Key", Key);
    tup.writeString("Value", Value);
    return tup;
};

var __CivetDevicePluginCenter_ProductProcess$EditProduct$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ProductProcess$EditProduct$ER = function (data) {
    throw _makeError(data, "Call ProductProcess::EditProduct failed");
};

CivetDevicePluginCenter.ProductProcessProxy.prototype.EditProduct = function (ID, Key, Value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("EditProduct", __CivetDevicePluginCenter_ProductProcess$EditProduct$PE(ID, Key, Value, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ProductProcess$EditProduct$IF).then(__CivetDevicePluginCenter_ProductProcess$EditProduct$PD, __CivetDevicePluginCenter_ProductProcess$EditProduct$ER);
    } else {
        return this._worker.tars_invoke("EditProduct", __CivetDevicePluginCenter_ProductProcess$EditProduct$IE(ID, Key, Value), arguments[arguments.length - 1], __CivetDevicePluginCenter_ProductProcess$EditProduct$IF).then(__CivetDevicePluginCenter_ProductProcess$EditProduct$ID, __CivetDevicePluginCenter_ProductProcess$EditProduct$ER);
    }
};
CivetDevicePluginCenter.ProductProcessProxy.EditProduct = __CivetDevicePluginCenter_ProductProcess$EditProduct$IF;

var __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$IF = {
    "name" : "QueryAllProduct",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "list(CivetDevicePluginCenter.Product)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readList(3, true, TarsStream.List(CivetDevicePluginCenter.Product)),
                    "count" : is.readInt32(4, true, 0),
                    "res" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readList("result", TarsStream.List(CivetDevicePluginCenter.Product)),
                    "count" : tup.readInt32("count"),
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$ER = function (data) {
    throw _makeError(data, "Call ProductProcess::QueryAllProduct failed");
};

CivetDevicePluginCenter.ProductProcessProxy.prototype.QueryAllProduct = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("QueryAllProduct", __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$PE(offset, limit, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$IF).then(__CivetDevicePluginCenter_ProductProcess$QueryAllProduct$PD, __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$ER);
    } else {
        return this._worker.tars_invoke("QueryAllProduct", __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$IE(offset, limit), arguments[arguments.length - 1], __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$IF).then(__CivetDevicePluginCenter_ProductProcess$QueryAllProduct$ID, __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$ER);
    }
};
CivetDevicePluginCenter.ProductProcessProxy.QueryAllProduct = __CivetDevicePluginCenter_ProductProcess$QueryAllProduct$IF;



