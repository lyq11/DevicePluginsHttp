// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "DeviceClassProcess.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var CivetDevicePluginCenter = CivetDevicePluginCenter || {};
module.exports.CivetDevicePluginCenter = CivetDevicePluginCenter;

CivetDevicePluginCenter.DeviceClassProcessProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

CivetDevicePluginCenter.DeviceClassProcessProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

CivetDevicePluginCenter.DeviceClassProcessProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

CivetDevicePluginCenter.DeviceClassProcessProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

CivetDevicePluginCenter.DeviceClassProcessProxy.prototype.getVersion = function () {
    return this._worker.version;
};

CivetDevicePluginCenter.DeviceClass = function() {
    this.ID = 0;
    this.Tag = "";
    this.Name = "";
    this.Router = "";
    this.Permission = "";
    this._classname = "CivetDevicePluginCenter.DeviceClass";
};
CivetDevicePluginCenter.DeviceClass._classname = "CivetDevicePluginCenter.DeviceClass";
CivetDevicePluginCenter.DeviceClass._write = function (os, tag, value) { os.writeStruct(tag, value); };
CivetDevicePluginCenter.DeviceClass._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
CivetDevicePluginCenter.DeviceClass._readFrom = function (is) {
    var tmp = new CivetDevicePluginCenter.DeviceClass;
    tmp.ID = is.readInt32(0, false, 0);
    tmp.Tag = is.readString(1, false, "");
    tmp.Name = is.readString(2, false, "");
    tmp.Router = is.readString(3, false, "");
    tmp.Permission = is.readString(4, false, "");
    return tmp;
};
CivetDevicePluginCenter.DeviceClass.prototype._writeTo = function (os) {
    os.writeInt32(0, this.ID);
    os.writeString(1, this.Tag);
    os.writeString(2, this.Name);
    os.writeString(3, this.Router);
    os.writeString(4, this.Permission);
};
CivetDevicePluginCenter.DeviceClass.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
CivetDevicePluginCenter.DeviceClass.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
CivetDevicePluginCenter.DeviceClass.prototype.toObject = function() { 
    return {
        "ID" : this.ID,
        "Tag" : this.Tag,
        "Name" : this.Name,
        "Router" : this.Router,
        "Permission" : this.Permission
    };
};
CivetDevicePluginCenter.DeviceClass.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "ID") && (this.ID = json.ID);
    _hasOwnProperty.call(json, "Tag") && (this.Tag = json.Tag);
    _hasOwnProperty.call(json, "Name") && (this.Name = json.Name);
    _hasOwnProperty.call(json, "Router") && (this.Router = json.Router);
    _hasOwnProperty.call(json, "Permission") && (this.Permission = json.Permission);
    return this;
};
CivetDevicePluginCenter.DeviceClass.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
CivetDevicePluginCenter.DeviceClass.new = function () {
    return new CivetDevicePluginCenter.DeviceClass();
};
CivetDevicePluginCenter.DeviceClass.create = function (is) {
    return CivetDevicePluginCenter.DeviceClass._readFrom(is);
};

var __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$IF = {
    "name" : "CreateDeviceClass",
    "return" : "int32",
    "arguments" : [{
        "name" : "info",
        "class" : "CivetDevicePluginCenter.DeviceClass",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$IE = function (info) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, info);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$PE = function (info, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("info", info);
    return tup;
};

var __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$ER = function (data) {
    throw _makeError(data, "Call DeviceClassProcess::CreateDeviceClass failed");
};

CivetDevicePluginCenter.DeviceClassProcessProxy.prototype.CreateDeviceClass = function (info) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("CreateDeviceClass", __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$PE(info, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$IF).then(__CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$PD, __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$ER);
    } else {
        return this._worker.tars_invoke("CreateDeviceClass", __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$IE(info), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$IF).then(__CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$ID, __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$ER);
    }
};
CivetDevicePluginCenter.DeviceClassProcessProxy.CreateDeviceClass = __CivetDevicePluginCenter_DeviceClassProcess$CreateDeviceClass$IF;

var __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$IF = {
    "name" : "EditDeviceClass",
    "return" : "int32",
    "arguments" : [{
        "name" : "info",
        "class" : "CivetDevicePluginCenter.DeviceClass",
        "direction" : "in"
    }, {
        "name" : "searchKey",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "searchValue",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$IE = function (info, searchKey, searchValue) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, info);
    os.writeString(2, searchKey);
    os.writeString(3, searchValue);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(4, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$PE = function (info, searchKey, searchValue, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("info", info);
    tup.writeString("searchKey", searchKey);
    tup.writeString("searchValue", searchValue);
    return tup;
};

var __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$ER = function (data) {
    throw _makeError(data, "Call DeviceClassProcess::EditDeviceClass failed");
};

CivetDevicePluginCenter.DeviceClassProcessProxy.prototype.EditDeviceClass = function (info, searchKey, searchValue) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("EditDeviceClass", __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$PE(info, searchKey, searchValue, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$IF).then(__CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$PD, __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$ER);
    } else {
        return this._worker.tars_invoke("EditDeviceClass", __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$IE(info, searchKey, searchValue), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$IF).then(__CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$ID, __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$ER);
    }
};
CivetDevicePluginCenter.DeviceClassProcessProxy.EditDeviceClass = __CivetDevicePluginCenter_DeviceClassProcess$EditDeviceClass$IF;

var __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$IF = {
    "name" : "QueryAllDevice",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "deviceClasslist",
        "class" : "list(CivetDevicePluginCenter.DeviceClass)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "deviceClasslist" : is.readList(3, true, TarsStream.List(CivetDevicePluginCenter.DeviceClass)),
                    "count" : is.readInt32(4, true, 0),
                    "res" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "deviceClasslist" : tup.readList("deviceClasslist", TarsStream.List(CivetDevicePluginCenter.DeviceClass)),
                    "count" : tup.readInt32("count"),
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$ER = function (data) {
    throw _makeError(data, "Call DeviceClassProcess::QueryAllDevice failed");
};

CivetDevicePluginCenter.DeviceClassProcessProxy.prototype.QueryAllDevice = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("QueryAllDevice", __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$PE(offset, limit, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$IF).then(__CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$PD, __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$ER);
    } else {
        return this._worker.tars_invoke("QueryAllDevice", __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$IE(offset, limit), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$IF).then(__CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$ID, __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$ER);
    }
};
CivetDevicePluginCenter.DeviceClassProcessProxy.QueryAllDevice = __CivetDevicePluginCenter_DeviceClassProcess$QueryAllDevice$IF;

var __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$IF = {
    "name" : "RemoveDeviceClass",
    "return" : "int32",
    "arguments" : [{
        "name" : "DeviceClassID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$IE = function (DeviceClassID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, DeviceClassID);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$PE = function (DeviceClassID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("DeviceClassID", DeviceClassID);
    return tup;
};

var __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$ER = function (data) {
    throw _makeError(data, "Call DeviceClassProcess::RemoveDeviceClass failed");
};

CivetDevicePluginCenter.DeviceClassProcessProxy.prototype.RemoveDeviceClass = function (DeviceClassID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("RemoveDeviceClass", __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$PE(DeviceClassID, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$IF).then(__CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$PD, __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$ER);
    } else {
        return this._worker.tars_invoke("RemoveDeviceClass", __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$IE(DeviceClassID), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$IF).then(__CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$ID, __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$ER);
    }
};
CivetDevicePluginCenter.DeviceClassProcessProxy.RemoveDeviceClass = __CivetDevicePluginCenter_DeviceClassProcess$RemoveDeviceClass$IF;



