// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "ManProcess.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var CivetDevicePluginCenter = CivetDevicePluginCenter || {};
module.exports.CivetDevicePluginCenter = CivetDevicePluginCenter;

CivetDevicePluginCenter.ManProcessProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

CivetDevicePluginCenter.ManProcessProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

CivetDevicePluginCenter.ManProcessProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

CivetDevicePluginCenter.ManProcessProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

CivetDevicePluginCenter.ManProcessProxy.prototype.getVersion = function () {
    return this._worker.version;
};

CivetDevicePluginCenter.Plugin = function() {
    this.ID = 0;
    this.Name = "";
    this.Enable = true;
    this.Path = "";
    this.CreateTime = "";
    this.UpdateTime = "";
    this._classname = "CivetDevicePluginCenter.Plugin";
};
CivetDevicePluginCenter.Plugin._classname = "CivetDevicePluginCenter.Plugin";
CivetDevicePluginCenter.Plugin._write = function (os, tag, value) { os.writeStruct(tag, value); };
CivetDevicePluginCenter.Plugin._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
CivetDevicePluginCenter.Plugin._readFrom = function (is) {
    var tmp = new CivetDevicePluginCenter.Plugin;
    tmp.ID = is.readInt32(0, false, 0);
    tmp.Name = is.readString(1, false, "");
    tmp.Enable = is.readBoolean(2, false, true);
    tmp.Path = is.readString(3, false, "");
    tmp.CreateTime = is.readString(4, false, "");
    tmp.UpdateTime = is.readString(5, false, "");
    return tmp;
};
CivetDevicePluginCenter.Plugin.prototype._writeTo = function (os) {
    os.writeInt32(0, this.ID);
    os.writeString(1, this.Name);
    os.writeBoolean(2, this.Enable);
    os.writeString(3, this.Path);
    os.writeString(4, this.CreateTime);
    os.writeString(5, this.UpdateTime);
};
CivetDevicePluginCenter.Plugin.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
CivetDevicePluginCenter.Plugin.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
CivetDevicePluginCenter.Plugin.prototype.toObject = function() { 
    return {
        "ID" : this.ID,
        "Name" : this.Name,
        "Enable" : this.Enable,
        "Path" : this.Path,
        "CreateTime" : this.CreateTime,
        "UpdateTime" : this.UpdateTime
    };
};
CivetDevicePluginCenter.Plugin.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "ID") && (this.ID = json.ID);
    _hasOwnProperty.call(json, "Name") && (this.Name = json.Name);
    _hasOwnProperty.call(json, "Enable") && (this.Enable = json.Enable);
    _hasOwnProperty.call(json, "Path") && (this.Path = json.Path);
    _hasOwnProperty.call(json, "CreateTime") && (this.CreateTime = json.CreateTime);
    _hasOwnProperty.call(json, "UpdateTime") && (this.UpdateTime = json.UpdateTime);
    return this;
};
CivetDevicePluginCenter.Plugin.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
CivetDevicePluginCenter.Plugin.new = function () {
    return new CivetDevicePluginCenter.Plugin();
};
CivetDevicePluginCenter.Plugin.create = function (is) {
    return CivetDevicePluginCenter.Plugin._readFrom(is);
};

CivetDevicePluginCenter.PluginBind = function() {
    this.ID = 0;
    this.ProductID = "";
    this.PluginID = 0;
    this.Summarise = "";
    this.CreateTime = "";
    this._classname = "CivetDevicePluginCenter.PluginBind";
};
CivetDevicePluginCenter.PluginBind._classname = "CivetDevicePluginCenter.PluginBind";
CivetDevicePluginCenter.PluginBind._write = function (os, tag, value) { os.writeStruct(tag, value); };
CivetDevicePluginCenter.PluginBind._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
CivetDevicePluginCenter.PluginBind._readFrom = function (is) {
    var tmp = new CivetDevicePluginCenter.PluginBind;
    tmp.ID = is.readInt32(0, true, 0);
    tmp.ProductID = is.readString(1, true, "");
    tmp.PluginID = is.readInt32(2, true, 0);
    tmp.Summarise = is.readString(3, true, "");
    tmp.CreateTime = is.readString(4, true, "");
    return tmp;
};
CivetDevicePluginCenter.PluginBind.prototype._writeTo = function (os) {
    os.writeInt32(0, this.ID);
    os.writeString(1, this.ProductID);
    os.writeInt32(2, this.PluginID);
    os.writeString(3, this.Summarise);
    os.writeString(4, this.CreateTime);
};
CivetDevicePluginCenter.PluginBind.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
CivetDevicePluginCenter.PluginBind.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
CivetDevicePluginCenter.PluginBind.prototype.toObject = function() { 
    return {
        "ID" : this.ID,
        "ProductID" : this.ProductID,
        "PluginID" : this.PluginID,
        "Summarise" : this.Summarise,
        "CreateTime" : this.CreateTime
    };
};
CivetDevicePluginCenter.PluginBind.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "ID") && (this.ID = json.ID);
    _hasOwnProperty.call(json, "ProductID") && (this.ProductID = json.ProductID);
    _hasOwnProperty.call(json, "PluginID") && (this.PluginID = json.PluginID);
    _hasOwnProperty.call(json, "Summarise") && (this.Summarise = json.Summarise);
    _hasOwnProperty.call(json, "CreateTime") && (this.CreateTime = json.CreateTime);
    return this;
};
CivetDevicePluginCenter.PluginBind.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
CivetDevicePluginCenter.PluginBind.new = function () {
    return new CivetDevicePluginCenter.PluginBind();
};
CivetDevicePluginCenter.PluginBind.create = function (is) {
    return CivetDevicePluginCenter.PluginBind._readFrom(is);
};

var __CivetDevicePluginCenter_ManProcess$Bind$IF = {
    "name" : "Bind",
    "return" : "int32",
    "arguments" : [{
        "name" : "relation",
        "class" : "CivetDevicePluginCenter.PluginBind",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ManProcess$Bind$IE = function (relation) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, relation);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ManProcess$Bind$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$Bind$PE = function (relation, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("relation", relation);
    return tup;
};

var __CivetDevicePluginCenter_ManProcess$Bind$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$Bind$ER = function (data) {
    throw _makeError(data, "Call ManProcess::Bind failed");
};

CivetDevicePluginCenter.ManProcessProxy.prototype.Bind = function (relation) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("Bind", __CivetDevicePluginCenter_ManProcess$Bind$PE(relation, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$Bind$IF).then(__CivetDevicePluginCenter_ManProcess$Bind$PD, __CivetDevicePluginCenter_ManProcess$Bind$ER);
    } else {
        return this._worker.tars_invoke("Bind", __CivetDevicePluginCenter_ManProcess$Bind$IE(relation), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$Bind$IF).then(__CivetDevicePluginCenter_ManProcess$Bind$ID, __CivetDevicePluginCenter_ManProcess$Bind$ER);
    }
};
CivetDevicePluginCenter.ManProcessProxy.Bind = __CivetDevicePluginCenter_ManProcess$Bind$IF;

var __CivetDevicePluginCenter_ManProcess$CreatePlugin$IF = {
    "name" : "CreatePlugin",
    "return" : "int32",
    "arguments" : [{
        "name" : "plugin",
        "class" : "CivetDevicePluginCenter.Plugin",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ManProcess$CreatePlugin$IE = function (plugin) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, plugin);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ManProcess$CreatePlugin$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$CreatePlugin$PE = function (plugin, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("plugin", plugin);
    return tup;
};

var __CivetDevicePluginCenter_ManProcess$CreatePlugin$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$CreatePlugin$ER = function (data) {
    throw _makeError(data, "Call ManProcess::CreatePlugin failed");
};

CivetDevicePluginCenter.ManProcessProxy.prototype.CreatePlugin = function (plugin) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("CreatePlugin", __CivetDevicePluginCenter_ManProcess$CreatePlugin$PE(plugin, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$CreatePlugin$IF).then(__CivetDevicePluginCenter_ManProcess$CreatePlugin$PD, __CivetDevicePluginCenter_ManProcess$CreatePlugin$ER);
    } else {
        return this._worker.tars_invoke("CreatePlugin", __CivetDevicePluginCenter_ManProcess$CreatePlugin$IE(plugin), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$CreatePlugin$IF).then(__CivetDevicePluginCenter_ManProcess$CreatePlugin$ID, __CivetDevicePluginCenter_ManProcess$CreatePlugin$ER);
    }
};
CivetDevicePluginCenter.ManProcessProxy.CreatePlugin = __CivetDevicePluginCenter_ManProcess$CreatePlugin$IF;

var __CivetDevicePluginCenter_ManProcess$DeletePlugin$IF = {
    "name" : "DeletePlugin",
    "return" : "int32",
    "arguments" : [{
        "name" : "pluginID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ManProcess$DeletePlugin$IE = function (pluginID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, pluginID);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ManProcess$DeletePlugin$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$DeletePlugin$PE = function (pluginID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("pluginID", pluginID);
    return tup;
};

var __CivetDevicePluginCenter_ManProcess$DeletePlugin$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$DeletePlugin$ER = function (data) {
    throw _makeError(data, "Call ManProcess::DeletePlugin failed");
};

CivetDevicePluginCenter.ManProcessProxy.prototype.DeletePlugin = function (pluginID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("DeletePlugin", __CivetDevicePluginCenter_ManProcess$DeletePlugin$PE(pluginID, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$DeletePlugin$IF).then(__CivetDevicePluginCenter_ManProcess$DeletePlugin$PD, __CivetDevicePluginCenter_ManProcess$DeletePlugin$ER);
    } else {
        return this._worker.tars_invoke("DeletePlugin", __CivetDevicePluginCenter_ManProcess$DeletePlugin$IE(pluginID), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$DeletePlugin$IF).then(__CivetDevicePluginCenter_ManProcess$DeletePlugin$ID, __CivetDevicePluginCenter_ManProcess$DeletePlugin$ER);
    }
};
CivetDevicePluginCenter.ManProcessProxy.DeletePlugin = __CivetDevicePluginCenter_ManProcess$DeletePlugin$IF;

var __CivetDevicePluginCenter_ManProcess$EditPlugin$IF = {
    "name" : "EditPlugin",
    "return" : "int32",
    "arguments" : [{
        "name" : "plugin",
        "class" : "CivetDevicePluginCenter.Plugin",
        "direction" : "in"
    }, {
        "name" : "searchKey",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "searchValue",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ManProcess$EditPlugin$IE = function (plugin, searchKey, searchValue) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, plugin);
    os.writeString(2, searchKey);
    os.writeString(3, searchValue);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ManProcess$EditPlugin$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(4, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$EditPlugin$PE = function (plugin, searchKey, searchValue, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("plugin", plugin);
    tup.writeString("searchKey", searchKey);
    tup.writeString("searchValue", searchValue);
    return tup;
};

var __CivetDevicePluginCenter_ManProcess$EditPlugin$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$EditPlugin$ER = function (data) {
    throw _makeError(data, "Call ManProcess::EditPlugin failed");
};

CivetDevicePluginCenter.ManProcessProxy.prototype.EditPlugin = function (plugin, searchKey, searchValue) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("EditPlugin", __CivetDevicePluginCenter_ManProcess$EditPlugin$PE(plugin, searchKey, searchValue, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$EditPlugin$IF).then(__CivetDevicePluginCenter_ManProcess$EditPlugin$PD, __CivetDevicePluginCenter_ManProcess$EditPlugin$ER);
    } else {
        return this._worker.tars_invoke("EditPlugin", __CivetDevicePluginCenter_ManProcess$EditPlugin$IE(plugin, searchKey, searchValue), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$EditPlugin$IF).then(__CivetDevicePluginCenter_ManProcess$EditPlugin$ID, __CivetDevicePluginCenter_ManProcess$EditPlugin$ER);
    }
};
CivetDevicePluginCenter.ManProcessProxy.EditPlugin = __CivetDevicePluginCenter_ManProcess$EditPlugin$IF;

var __CivetDevicePluginCenter_ManProcess$QueryBindAll$IF = {
    "name" : "QueryBindAll",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "list(CivetDevicePluginCenter.PluginBind)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ManProcess$QueryBindAll$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ManProcess$QueryBindAll$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readList(3, true, TarsStream.List(CivetDevicePluginCenter.PluginBind)),
                    "count" : is.readInt32(4, true, 0),
                    "res" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$QueryBindAll$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __CivetDevicePluginCenter_ManProcess$QueryBindAll$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readList("result", TarsStream.List(CivetDevicePluginCenter.PluginBind)),
                    "count" : tup.readInt32("count"),
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$QueryBindAll$ER = function (data) {
    throw _makeError(data, "Call ManProcess::QueryBindAll failed");
};

CivetDevicePluginCenter.ManProcessProxy.prototype.QueryBindAll = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("QueryBindAll", __CivetDevicePluginCenter_ManProcess$QueryBindAll$PE(offset, limit, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$QueryBindAll$IF).then(__CivetDevicePluginCenter_ManProcess$QueryBindAll$PD, __CivetDevicePluginCenter_ManProcess$QueryBindAll$ER);
    } else {
        return this._worker.tars_invoke("QueryBindAll", __CivetDevicePluginCenter_ManProcess$QueryBindAll$IE(offset, limit), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$QueryBindAll$IF).then(__CivetDevicePluginCenter_ManProcess$QueryBindAll$ID, __CivetDevicePluginCenter_ManProcess$QueryBindAll$ER);
    }
};
CivetDevicePluginCenter.ManProcessProxy.QueryBindAll = __CivetDevicePluginCenter_ManProcess$QueryBindAll$IF;

var __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$IF = {
    "name" : "QueryBindWithPluginID",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "PluginID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "list(CivetDevicePluginCenter.PluginBind)",
        "direction" : "out"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$IE = function (offset, limit, PluginID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeInt32(3, PluginID);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readList(4, true, TarsStream.List(CivetDevicePluginCenter.PluginBind)),
                    "res" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$PE = function (offset, limit, PluginID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeInt32("PluginID", PluginID);
    return tup;
};

var __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readList("result", TarsStream.List(CivetDevicePluginCenter.PluginBind)),
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$ER = function (data) {
    throw _makeError(data, "Call ManProcess::QueryBindWithPluginID failed");
};

CivetDevicePluginCenter.ManProcessProxy.prototype.QueryBindWithPluginID = function (offset, limit, PluginID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("QueryBindWithPluginID", __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$PE(offset, limit, PluginID, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$IF).then(__CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$PD, __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$ER);
    } else {
        return this._worker.tars_invoke("QueryBindWithPluginID", __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$IE(offset, limit, PluginID), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$IF).then(__CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$ID, __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$ER);
    }
};
CivetDevicePluginCenter.ManProcessProxy.QueryBindWithPluginID = __CivetDevicePluginCenter_ManProcess$QueryBindWithPluginID$IF;

var __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$IF = {
    "name" : "QueryBindWithProduct",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "ProductID",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "list(CivetDevicePluginCenter.PluginBind)",
        "direction" : "out"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$IE = function (offset, limit, ProductID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeString(3, ProductID);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readList(4, true, TarsStream.List(CivetDevicePluginCenter.PluginBind)),
                    "res" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$PE = function (offset, limit, ProductID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeString("ProductID", ProductID);
    return tup;
};

var __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readList("result", TarsStream.List(CivetDevicePluginCenter.PluginBind)),
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$ER = function (data) {
    throw _makeError(data, "Call ManProcess::QueryBindWithProduct failed");
};

CivetDevicePluginCenter.ManProcessProxy.prototype.QueryBindWithProduct = function (offset, limit, ProductID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("QueryBindWithProduct", __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$PE(offset, limit, ProductID, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$IF).then(__CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$PD, __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$ER);
    } else {
        return this._worker.tars_invoke("QueryBindWithProduct", __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$IE(offset, limit, ProductID), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$IF).then(__CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$ID, __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$ER);
    }
};
CivetDevicePluginCenter.ManProcessProxy.QueryBindWithProduct = __CivetDevicePluginCenter_ManProcess$QueryBindWithProduct$IF;

var __CivetDevicePluginCenter_ManProcess$QueryPlugins$IF = {
    "name" : "QueryPlugins",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "Pluginlist",
        "class" : "list(CivetDevicePluginCenter.Plugin)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ManProcess$QueryPlugins$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ManProcess$QueryPlugins$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "Pluginlist" : is.readList(3, true, TarsStream.List(CivetDevicePluginCenter.Plugin)),
                    "count" : is.readInt32(4, true, 0),
                    "res" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$QueryPlugins$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __CivetDevicePluginCenter_ManProcess$QueryPlugins$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "Pluginlist" : tup.readList("Pluginlist", TarsStream.List(CivetDevicePluginCenter.Plugin)),
                    "count" : tup.readInt32("count"),
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$QueryPlugins$ER = function (data) {
    throw _makeError(data, "Call ManProcess::QueryPlugins failed");
};

CivetDevicePluginCenter.ManProcessProxy.prototype.QueryPlugins = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("QueryPlugins", __CivetDevicePluginCenter_ManProcess$QueryPlugins$PE(offset, limit, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$QueryPlugins$IF).then(__CivetDevicePluginCenter_ManProcess$QueryPlugins$PD, __CivetDevicePluginCenter_ManProcess$QueryPlugins$ER);
    } else {
        return this._worker.tars_invoke("QueryPlugins", __CivetDevicePluginCenter_ManProcess$QueryPlugins$IE(offset, limit), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$QueryPlugins$IF).then(__CivetDevicePluginCenter_ManProcess$QueryPlugins$ID, __CivetDevicePluginCenter_ManProcess$QueryPlugins$ER);
    }
};
CivetDevicePluginCenter.ManProcessProxy.QueryPlugins = __CivetDevicePluginCenter_ManProcess$QueryPlugins$IF;

var __CivetDevicePluginCenter_ManProcess$UnBindWithID$IF = {
    "name" : "UnBindWithID",
    "return" : "int32",
    "arguments" : [{
        "name" : "relation",
        "class" : "CivetDevicePluginCenter.PluginBind",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_ManProcess$UnBindWithID$IE = function (relation) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, relation);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_ManProcess$UnBindWithID$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$UnBindWithID$PE = function (relation, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("relation", relation);
    return tup;
};

var __CivetDevicePluginCenter_ManProcess$UnBindWithID$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_ManProcess$UnBindWithID$ER = function (data) {
    throw _makeError(data, "Call ManProcess::UnBindWithID failed");
};

CivetDevicePluginCenter.ManProcessProxy.prototype.UnBindWithID = function (relation) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("UnBindWithID", __CivetDevicePluginCenter_ManProcess$UnBindWithID$PE(relation, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$UnBindWithID$IF).then(__CivetDevicePluginCenter_ManProcess$UnBindWithID$PD, __CivetDevicePluginCenter_ManProcess$UnBindWithID$ER);
    } else {
        return this._worker.tars_invoke("UnBindWithID", __CivetDevicePluginCenter_ManProcess$UnBindWithID$IE(relation), arguments[arguments.length - 1], __CivetDevicePluginCenter_ManProcess$UnBindWithID$IF).then(__CivetDevicePluginCenter_ManProcess$UnBindWithID$ID, __CivetDevicePluginCenter_ManProcess$UnBindWithID$ER);
    }
};
CivetDevicePluginCenter.ManProcessProxy.UnBindWithID = __CivetDevicePluginCenter_ManProcess$UnBindWithID$IF;



