// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "DeviceAuthProcess.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var CivetDevicePluginCenter = CivetDevicePluginCenter || {};
module.exports.CivetDevicePluginCenter = CivetDevicePluginCenter;

CivetDevicePluginCenter.DeviceAuthProcessProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.getVersion = function () {
    return this._worker.version;
};

CivetDevicePluginCenter.CompanyDeivceBind = function() {
    this.ID = 0;
    this.CompanyID = 0;
    this.DeivceClassID = 0;
    this.Summarise = "";
    this.CreateTime = "";
    this.UpdateTime = "";
    this.expireTime = 0;
    this._classname = "CivetDevicePluginCenter.CompanyDeivceBind";
};
CivetDevicePluginCenter.CompanyDeivceBind._classname = "CivetDevicePluginCenter.CompanyDeivceBind";
CivetDevicePluginCenter.CompanyDeivceBind._write = function (os, tag, value) { os.writeStruct(tag, value); };
CivetDevicePluginCenter.CompanyDeivceBind._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
CivetDevicePluginCenter.CompanyDeivceBind._readFrom = function (is) {
    var tmp = new CivetDevicePluginCenter.CompanyDeivceBind;
    tmp.ID = is.readInt32(0, false, 0);
    tmp.CompanyID = is.readInt32(1, false, 0);
    tmp.DeivceClassID = is.readInt32(2, false, 0);
    tmp.Summarise = is.readString(3, false, "");
    tmp.CreateTime = is.readString(4, false, "");
    tmp.UpdateTime = is.readString(5, false, "");
    tmp.expireTime = is.readInt32(6, false, 0);
    return tmp;
};
CivetDevicePluginCenter.CompanyDeivceBind.prototype._writeTo = function (os) {
    os.writeInt32(0, this.ID);
    os.writeInt32(1, this.CompanyID);
    os.writeInt32(2, this.DeivceClassID);
    os.writeString(3, this.Summarise);
    os.writeString(4, this.CreateTime);
    os.writeString(5, this.UpdateTime);
    os.writeInt32(6, this.expireTime);
};
CivetDevicePluginCenter.CompanyDeivceBind.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
CivetDevicePluginCenter.CompanyDeivceBind.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
CivetDevicePluginCenter.CompanyDeivceBind.prototype.toObject = function() { 
    return {
        "ID" : this.ID,
        "CompanyID" : this.CompanyID,
        "DeivceClassID" : this.DeivceClassID,
        "Summarise" : this.Summarise,
        "CreateTime" : this.CreateTime,
        "UpdateTime" : this.UpdateTime,
        "expireTime" : this.expireTime
    };
};
CivetDevicePluginCenter.CompanyDeivceBind.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "ID") && (this.ID = json.ID);
    _hasOwnProperty.call(json, "CompanyID") && (this.CompanyID = json.CompanyID);
    _hasOwnProperty.call(json, "DeivceClassID") && (this.DeivceClassID = json.DeivceClassID);
    _hasOwnProperty.call(json, "Summarise") && (this.Summarise = json.Summarise);
    _hasOwnProperty.call(json, "CreateTime") && (this.CreateTime = json.CreateTime);
    _hasOwnProperty.call(json, "UpdateTime") && (this.UpdateTime = json.UpdateTime);
    _hasOwnProperty.call(json, "expireTime") && (this.expireTime = json.expireTime);
    return this;
};
CivetDevicePluginCenter.CompanyDeivceBind.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
CivetDevicePluginCenter.CompanyDeivceBind.new = function () {
    return new CivetDevicePluginCenter.CompanyDeivceBind();
};
CivetDevicePluginCenter.CompanyDeivceBind.create = function (is) {
    return CivetDevicePluginCenter.CompanyDeivceBind._readFrom(is);
};

CivetDevicePluginCenter.CompanyProductBind = function() {
    this.ID = 0;
    this.CompanyID = 0;
    this.ProductID = 0;
    this.Summarise = "";
    this.CreateTime = "";
    this.UpdateTime = "";
    this.SoftDelete = true;
    this._classname = "CivetDevicePluginCenter.CompanyProductBind";
};
CivetDevicePluginCenter.CompanyProductBind._classname = "CivetDevicePluginCenter.CompanyProductBind";
CivetDevicePluginCenter.CompanyProductBind._write = function (os, tag, value) { os.writeStruct(tag, value); };
CivetDevicePluginCenter.CompanyProductBind._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
CivetDevicePluginCenter.CompanyProductBind._readFrom = function (is) {
    var tmp = new CivetDevicePluginCenter.CompanyProductBind;
    tmp.ID = is.readInt32(0, false, 0);
    tmp.CompanyID = is.readInt32(1, false, 0);
    tmp.ProductID = is.readInt32(2, false, 0);
    tmp.Summarise = is.readString(3, false, "");
    tmp.CreateTime = is.readString(4, false, "");
    tmp.UpdateTime = is.readString(5, false, "");
    tmp.SoftDelete = is.readBoolean(6, false, true);
    return tmp;
};
CivetDevicePluginCenter.CompanyProductBind.prototype._writeTo = function (os) {
    os.writeInt32(0, this.ID);
    os.writeInt32(1, this.CompanyID);
    os.writeInt32(2, this.ProductID);
    os.writeString(3, this.Summarise);
    os.writeString(4, this.CreateTime);
    os.writeString(5, this.UpdateTime);
    os.writeBoolean(6, this.SoftDelete);
};
CivetDevicePluginCenter.CompanyProductBind.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
CivetDevicePluginCenter.CompanyProductBind.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
CivetDevicePluginCenter.CompanyProductBind.prototype.toObject = function() { 
    return {
        "ID" : this.ID,
        "CompanyID" : this.CompanyID,
        "ProductID" : this.ProductID,
        "Summarise" : this.Summarise,
        "CreateTime" : this.CreateTime,
        "UpdateTime" : this.UpdateTime,
        "SoftDelete" : this.SoftDelete
    };
};
CivetDevicePluginCenter.CompanyProductBind.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "ID") && (this.ID = json.ID);
    _hasOwnProperty.call(json, "CompanyID") && (this.CompanyID = json.CompanyID);
    _hasOwnProperty.call(json, "ProductID") && (this.ProductID = json.ProductID);
    _hasOwnProperty.call(json, "Summarise") && (this.Summarise = json.Summarise);
    _hasOwnProperty.call(json, "CreateTime") && (this.CreateTime = json.CreateTime);
    _hasOwnProperty.call(json, "UpdateTime") && (this.UpdateTime = json.UpdateTime);
    _hasOwnProperty.call(json, "SoftDelete") && (this.SoftDelete = json.SoftDelete);
    return this;
};
CivetDevicePluginCenter.CompanyProductBind.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
CivetDevicePluginCenter.CompanyProductBind.new = function () {
    return new CivetDevicePluginCenter.CompanyProductBind();
};
CivetDevicePluginCenter.CompanyProductBind.create = function (is) {
    return CivetDevicePluginCenter.CompanyProductBind._readFrom(is);
};

var __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$IF = {
    "name" : "BindDeviceCompany",
    "return" : "int32",
    "arguments" : [{
        "name" : "relation",
        "class" : "CivetDevicePluginCenter.CompanyDeivceBind",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$IE = function (relation) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, relation);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$PE = function (relation, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("relation", relation);
    return tup;
};

var __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$ER = function (data) {
    throw _makeError(data, "Call DeviceAuthProcess::BindDeviceCompany failed");
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.BindDeviceCompany = function (relation) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("BindDeviceCompany", __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$PE(relation, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$PD, __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$ER);
    } else {
        return this._worker.tars_invoke("BindDeviceCompany", __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$IE(relation), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$ID, __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$ER);
    }
};
CivetDevicePluginCenter.DeviceAuthProcessProxy.BindDeviceCompany = __CivetDevicePluginCenter_DeviceAuthProcess$BindDeviceCompany$IF;

var __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$IF = {
    "name" : "BindProductCompany",
    "return" : "int32",
    "arguments" : [{
        "name" : "relation",
        "class" : "CivetDevicePluginCenter.CompanyProductBind",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$IE = function (relation) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, relation);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$PE = function (relation, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("relation", relation);
    return tup;
};

var __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$ER = function (data) {
    throw _makeError(data, "Call DeviceAuthProcess::BindProductCompany failed");
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.BindProductCompany = function (relation) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("BindProductCompany", __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$PE(relation, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$PD, __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$ER);
    } else {
        return this._worker.tars_invoke("BindProductCompany", __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$IE(relation), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$ID, __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$ER);
    }
};
CivetDevicePluginCenter.DeviceAuthProcessProxy.BindProductCompany = __CivetDevicePluginCenter_DeviceAuthProcess$BindProductCompany$IF;

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$IF = {
    "name" : "QueryCompanyBindWithDeviceC",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "DeviceClassID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "list(CivetDevicePluginCenter.CompanyDeivceBind)",
        "direction" : "out"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$IE = function (offset, limit, DeviceClassID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeInt32(3, DeviceClassID);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readList(4, true, TarsStream.List(CivetDevicePluginCenter.CompanyDeivceBind)),
                    "res" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$PE = function (offset, limit, DeviceClassID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeInt32("DeviceClassID", DeviceClassID);
    return tup;
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readList("result", TarsStream.List(CivetDevicePluginCenter.CompanyDeivceBind)),
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$ER = function (data) {
    throw _makeError(data, "Call DeviceAuthProcess::QueryCompanyBindWithDeviceC failed");
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.QueryCompanyBindWithDeviceC = function (offset, limit, DeviceClassID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("QueryCompanyBindWithDeviceC", __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$PE(offset, limit, DeviceClassID, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$PD, __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$ER);
    } else {
        return this._worker.tars_invoke("QueryCompanyBindWithDeviceC", __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$IE(offset, limit, DeviceClassID), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$ID, __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$ER);
    }
};
CivetDevicePluginCenter.DeviceAuthProcessProxy.QueryCompanyBindWithDeviceC = __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithDeviceC$IF;

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$IF = {
    "name" : "QueryCompanyBindWithProductID",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "ProductID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "list(CivetDevicePluginCenter.CompanyProductBind)",
        "direction" : "out"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$IE = function (offset, limit, ProductID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeInt32(3, ProductID);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readList(4, true, TarsStream.List(CivetDevicePluginCenter.CompanyProductBind)),
                    "res" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$PE = function (offset, limit, ProductID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeInt32("ProductID", ProductID);
    return tup;
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readList("result", TarsStream.List(CivetDevicePluginCenter.CompanyProductBind)),
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$ER = function (data) {
    throw _makeError(data, "Call DeviceAuthProcess::QueryCompanyBindWithProductID failed");
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.QueryCompanyBindWithProductID = function (offset, limit, ProductID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("QueryCompanyBindWithProductID", __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$PE(offset, limit, ProductID, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$PD, __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$ER);
    } else {
        return this._worker.tars_invoke("QueryCompanyBindWithProductID", __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$IE(offset, limit, ProductID), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$ID, __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$ER);
    }
};
CivetDevicePluginCenter.DeviceAuthProcessProxy.QueryCompanyBindWithProductID = __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyBindWithProductID$IF;

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$IF = {
    "name" : "QueryCompanyDeviceCBindAll",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "list(CivetDevicePluginCenter.CompanyDeivceBind)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readList(3, true, TarsStream.List(CivetDevicePluginCenter.CompanyDeivceBind)),
                    "count" : is.readInt32(4, true, 0),
                    "res" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readList("result", TarsStream.List(CivetDevicePluginCenter.CompanyDeivceBind)),
                    "count" : tup.readInt32("count"),
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$ER = function (data) {
    throw _makeError(data, "Call DeviceAuthProcess::QueryCompanyDeviceCBindAll failed");
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.QueryCompanyDeviceCBindAll = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("QueryCompanyDeviceCBindAll", __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$PE(offset, limit, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$PD, __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$ER);
    } else {
        return this._worker.tars_invoke("QueryCompanyDeviceCBindAll", __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$IE(offset, limit), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$ID, __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$ER);
    }
};
CivetDevicePluginCenter.DeviceAuthProcessProxy.QueryCompanyDeviceCBindAll = __CivetDevicePluginCenter_DeviceAuthProcess$QueryCompanyDeviceCBindAll$IF;

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$IF = {
    "name" : "QueryDeviceCBindWithCompanyID",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "list(CivetDevicePluginCenter.CompanyDeivceBind)",
        "direction" : "out"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$IE = function (offset, limit, CompanyID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeInt32(3, CompanyID);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readList(4, true, TarsStream.List(CivetDevicePluginCenter.CompanyDeivceBind)),
                    "res" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$PE = function (offset, limit, CompanyID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeInt32("CompanyID", CompanyID);
    return tup;
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readList("result", TarsStream.List(CivetDevicePluginCenter.CompanyDeivceBind)),
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$ER = function (data) {
    throw _makeError(data, "Call DeviceAuthProcess::QueryDeviceCBindWithCompanyID failed");
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.QueryDeviceCBindWithCompanyID = function (offset, limit, CompanyID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("QueryDeviceCBindWithCompanyID", __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$PE(offset, limit, CompanyID, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$PD, __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$ER);
    } else {
        return this._worker.tars_invoke("QueryDeviceCBindWithCompanyID", __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$IE(offset, limit, CompanyID), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$ID, __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$ER);
    }
};
CivetDevicePluginCenter.DeviceAuthProcessProxy.QueryDeviceCBindWithCompanyID = __CivetDevicePluginCenter_DeviceAuthProcess$QueryDeviceCBindWithCompanyID$IF;

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$IF = {
    "name" : "QueryProductBindWithCompanyID",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "list(CivetDevicePluginCenter.CompanyProductBind)",
        "direction" : "out"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$IE = function (offset, limit, CompanyID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeInt32(3, CompanyID);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readList(4, true, TarsStream.List(CivetDevicePluginCenter.CompanyProductBind)),
                    "res" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$PE = function (offset, limit, CompanyID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeInt32("CompanyID", CompanyID);
    return tup;
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readList("result", TarsStream.List(CivetDevicePluginCenter.CompanyProductBind)),
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$ER = function (data) {
    throw _makeError(data, "Call DeviceAuthProcess::QueryProductBindWithCompanyID failed");
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.QueryProductBindWithCompanyID = function (offset, limit, CompanyID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("QueryProductBindWithCompanyID", __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$PE(offset, limit, CompanyID, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$PD, __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$ER);
    } else {
        return this._worker.tars_invoke("QueryProductBindWithCompanyID", __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$IE(offset, limit, CompanyID), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$ID, __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$ER);
    }
};
CivetDevicePluginCenter.DeviceAuthProcessProxy.QueryProductBindWithCompanyID = __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductBindWithCompanyID$IF;

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$IF = {
    "name" : "QueryProductCompanyBindAll",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "list(CivetDevicePluginCenter.CompanyProductBind)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readList(3, true, TarsStream.List(CivetDevicePluginCenter.CompanyProductBind)),
                    "count" : is.readInt32(4, true, 0),
                    "res" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readList("result", TarsStream.List(CivetDevicePluginCenter.CompanyProductBind)),
                    "count" : tup.readInt32("count"),
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$ER = function (data) {
    throw _makeError(data, "Call DeviceAuthProcess::QueryProductCompanyBindAll failed");
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.QueryProductCompanyBindAll = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("QueryProductCompanyBindAll", __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$PE(offset, limit, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$PD, __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$ER);
    } else {
        return this._worker.tars_invoke("QueryProductCompanyBindAll", __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$IE(offset, limit), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$ID, __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$ER);
    }
};
CivetDevicePluginCenter.DeviceAuthProcessProxy.QueryProductCompanyBindAll = __CivetDevicePluginCenter_DeviceAuthProcess$QueryProductCompanyBindAll$IF;

var __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$IF = {
    "name" : "UnBindDeviceCompany",
    "return" : "int32",
    "arguments" : [{
        "name" : "relation",
        "class" : "CivetDevicePluginCenter.CompanyDeivceBind",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$IE = function (relation) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, relation);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$PE = function (relation, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("relation", relation);
    return tup;
};

var __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$ER = function (data) {
    throw _makeError(data, "Call DeviceAuthProcess::UnBindDeviceCompany failed");
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.UnBindDeviceCompany = function (relation) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("UnBindDeviceCompany", __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$PE(relation, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$PD, __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$ER);
    } else {
        return this._worker.tars_invoke("UnBindDeviceCompany", __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$IE(relation), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$ID, __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$ER);
    }
};
CivetDevicePluginCenter.DeviceAuthProcessProxy.UnBindDeviceCompany = __CivetDevicePluginCenter_DeviceAuthProcess$UnBindDeviceCompany$IF;

var __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$IF = {
    "name" : "UnBindProductCompany",
    "return" : "int32",
    "arguments" : [{
        "name" : "relation",
        "class" : "CivetDevicePluginCenter.CompanyProductBind",
        "direction" : "in"
    }, {
        "name" : "res",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$IE = function (relation) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, relation);
    return os.getBinBuffer();
};

var __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "res" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$PE = function (relation, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("relation", relation);
    return tup;
};

var __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "res" : tup.readInt32("res")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$ER = function (data) {
    throw _makeError(data, "Call DeviceAuthProcess::UnBindProductCompany failed");
};

CivetDevicePluginCenter.DeviceAuthProcessProxy.prototype.UnBindProductCompany = function (relation) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("UnBindProductCompany", __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$PE(relation, version), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$PD, __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$ER);
    } else {
        return this._worker.tars_invoke("UnBindProductCompany", __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$IE(relation), arguments[arguments.length - 1], __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$IF).then(__CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$ID, __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$ER);
    }
};
CivetDevicePluginCenter.DeviceAuthProcessProxy.UnBindProductCompany = __CivetDevicePluginCenter_DeviceAuthProcess$UnBindProductCompany$IF;



